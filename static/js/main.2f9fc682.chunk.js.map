{"version":3,"sources":["components/Game.js","components/Games.js","components/GameForm.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Game","image","title","description","rating","GridRow","GridColumn","width","Header","src","onError","e","target","alt","Games","games","Container","Grid","celled","map","game","GameForm","user_submitted","useState","set_title","set_description","set_rating","set_image","Form","Field","Input","placeholder","value","onChange","Button","onClick","a","fetch","method","headers","body","JSON","stringify","Footer","className","href","App","setList","useEffect","then","response","json","data","style","marginTop","current_list","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f9fc682.chunk.js","sourcesContent":["import React from 'react'\nimport { Header, GridRow, GridColumn } from 'semantic-ui-react'\n\nexport const Game = ({ image, title, description, rating }) => (\n  <GridRow>\n    <GridColumn width={2}>\n      <Header>\n        <img\n          src={image}\n          onError={e => {\n            e.target.src = 'defaultart.jpg'\n          }}\n          alt={title}\n        />\n      </Header>\n      <Header>{title}</Header>\n    </GridColumn>\n    <GridColumn width={12}>\n      <Header>{description}</Header>\n    </GridColumn>\n    <GridColumn width={2}>\n      <Header>{rating} </Header>\n    </GridColumn>\n  </GridRow>\n)\n","import React from 'react'\r\nimport { Grid, Container } from 'semantic-ui-react'\r\nimport { Game } from './Game'\r\n\r\nexport const Games = ({ games }) => {\r\n  return (\r\n    <Container>\r\n      <Grid celled>\r\n        {games.map(game => (\r\n          <Game {...game} />\r\n        ))}\r\n      </Grid>\r\n    </Container>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Form, Input, Button } from 'semantic-ui-react'\r\n\r\nexport const GameForm = ({ user_submitted }) => {\r\n  const [title, set_title] = useState('')\r\n  const [description, set_description] = useState('')\r\n  const [rating, set_rating] = useState('')\r\n  const [image, set_image] = useState('')\r\n\r\n  return (\r\n    <Form>\r\n      <Form.Field width={2}>\r\n        <Input\r\n          placeholder=\"Game Title\"\r\n          value={title}\r\n          onChange={e => set_title(e.target.value)}\r\n        />\r\n      </Form.Field>\r\n\r\n      <Form.Field width={6}>\r\n        <Input\r\n          placeholder=\"Input image URL\"\r\n          value={image}\r\n          onChange={e => set_image(e.target.value)}\r\n        />\r\n      </Form.Field>\r\n\r\n      <Form.Field width={16}>\r\n        <Input\r\n          placeholder=\"Description\"\r\n          value={description}\r\n          onChange={e => set_description(e.target.value)}\r\n        />\r\n      </Form.Field>\r\n\r\n      <Form.Field width={1}>\r\n        <Input\r\n          placeholder=\"00\"\r\n          value={rating}\r\n          onChange={e => set_rating(e.target.value)}\r\n        />\r\n      </Form.Field>\r\n\r\n      <Form.Field>\r\n        <Button\r\n          onClick={async () => {\r\n            const game = { title, description, rating, image }\r\n            await fetch('/add_game', {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/json' },\r\n              body: JSON.stringify(game),\r\n            })\r\n\r\n            user_submitted(game)\r\n          }}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form.Field>\r\n    </Form>\r\n  )\r\n}\r\n","import React from 'react'\nimport './Footer.css'\n\nexport const Footer = () => (\n  <div>\n    <h2 className=\"Footer\">Links to the other pages:</h2>\n\n    <ul className=\"Lead\">\n      <li>\n        Page1: <a href=\"/\">Frameworks</a>\n      </li>\n      <li>\n        Page2: <a href=\"installation.html\">Installation</a>\n      </li>\n      <li>\n        Page3: <a href=\"tutorial.html\">Tutorial</a>\n      </li>\n      <li>\n        Page5: <a href=\"conclusion.html\">Conclusion</a>\n      </li>\n      <li>\n        Page6: <a href=\"credits.html\">Credits</a>\n      </li>\n    </ul>\n  </div>\n)\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { Games } from './components/Games'\nimport { GameForm } from './components/GameForm'\nimport { Container } from 'semantic-ui-react'\nimport { Footer } from './components/Footer'\n\nfunction App() {\n  const [games, setList] = useState([])\n\n  useEffect(() => {\n    fetch('/games').then(response =>\n      response.json().then(data => {\n        setList(data.games)\n      }),\n    )\n  }, [])\n\n  return (\n    <>\n      <div className=\"App\">\n        <h1>Page 4</h1>\n\n        <Container style={{ marginTop: 50 }}>\n          <GameForm\n            user_submitted={game =>\n              setList(current_list => [game, ...current_list])\n            }\n          />\n          <Games games={games} />\n        </Container>\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}